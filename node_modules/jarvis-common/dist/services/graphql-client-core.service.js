"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLClientCoreService = exports.GRAPHQL_MINDATE = void 0;
const client_1 = require("@apollo/client");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const error_1 = require("@apollo/client/link/error");
const dev_1 = require("@apollo/client/dev");
exports.GRAPHQL_MINDATE = new Date('1990-01-01T00:00:00');
const errorLink = (0, error_1.onError)(({ graphQLErrors, networkError }) => {
    if (graphQLErrors)
        graphQLErrors.forEach(({ message, locations, path }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));
    if (networkError)
        console.log(`[Network error]: ${networkError}`);
});
(0, dev_1.loadDevMessages)();
(0, dev_1.loadErrorMessages)();
const authLink = (token, apikey) => {
    return new client_1.ApolloLink((operation, forward) => {
        if (!token && !apikey) {
            throw new Error('No token or APIKEY provided');
        }
        const context = {
            headers: {},
        };
        if (token) {
            context.headers.authorization = `Bearer ${token}`;
        }
        if (apikey && !token) {
            context.headers.apikey = apikey;
        }
        operation.setContext(context);
        return forward(operation);
    });
};
class GraphQLClientCoreService {
    extractArrayResults(response) {
        return response.data[Object.keys(response.data)[0]].edges.map((x) => x.node);
    }
    constructor(config) {
        const cache = new client_1.InMemoryCache({
            addTypename: false,
        });
        const defaultOptions = {
            watchQuery: {
                fetchPolicy: 'cache-and-network',
                errorPolicy: 'ignore',
            },
            query: {
                fetchPolicy: 'network-only',
                errorPolicy: 'all',
            },
            mutate: {
                errorPolicy: 'all',
            },
        };
        this.client = new client_1.ApolloClient({
            cache: cache,
            defaultOptions: defaultOptions,
            link: (0, client_1.from)([
                errorLink,
                authLink(config?.token, config?.apikey).concat(new client_1.HttpLink({ uri: config.uri, fetch: cross_fetch_1.default })),
            ]),
        });
    }
}
exports.GraphQLClientCoreService = GraphQLClientCoreService;
//# sourceMappingURL=graphql-client-core.service.js.map