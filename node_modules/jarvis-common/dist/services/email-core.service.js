"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailCoreService = void 0;
exports.toEmailList = toEmailList;
const node_mailjet_1 = __importDefault(require("node-mailjet"));
function castAsEmailAddress(email, name = '') {
    return {
        Email: email,
        Name: name,
    };
}
function toEmailAddress(email) {
    return typeof email === 'string' ? castAsEmailAddress(email) : email;
}
function toEmailList(emails) {
    if (Array.isArray(emails)) {
        return emails.map((email) => typeof email === 'string' ? castAsEmailAddress(email) : email);
    }
    else {
        return [typeof emails === 'string' ? castAsEmailAddress(emails) : emails];
    }
}
class EmailCoreService {
    constructor(config) {
        if (!config.defaultFrom)
            throw Error('missing config variable "defaultFrom"');
        if (!config.defaultTo)
            throw Error('missing config variable "defaultTo"');
        if (!config.apiKey)
            throw new Error('missing config variable "apiKey"');
        if (!config.apiSecret)
            throw new Error('missing config variable "apiSecret"');
        this.mailjetInstance = new node_mailjet_1.default({
            apiKey: config.apiKey,
            apiSecret: config.apiSecret,
        });
        this.defaultFrom = {
            Email: config.defaultFrom,
            Name: 'Foresight Portal',
        };
        this.defaultTo = {
            Email: config.defaultTo,
            Name: config.defaultTo,
        };
        this.releaseEmails = !!config.releaseEmails ? config.releaseEmails : false;
        if (this.releaseEmails) {
            console.log(`** WARNING ** Will release emails to clients`);
        }
        else {
            console.log(`environment variable RELEASE_EMAILS: ${this.releaseEmails}, will NOT release emails, sending to ${config.defaultTo}`);
        }
    }
    getEmailList(emails) {
        if (this.releaseEmails) {
            return toEmailList(emails);
        }
        else {
            return [this.defaultTo];
        }
    }
    async sendHTMLEmailMessage(emails, message, attachments = [], from = null) {
        return await this.sendHTMLEmailWithAttachments(emails, message.title, message.render(), attachments, message.getSupportingImageAttachments(), from);
    }
    async sendHTMLEmail(emails, subject, HTMLbody, from = null, textBody = 'This email must be viewed in HTML mode') {
        const toList = this.getEmailList(emails);
        const globals = {
            From: from ? toEmailAddress(from) : this.defaultFrom,
            Subject: subject,
            TextPart: textBody,
            HTMLPart: HTMLbody,
        };
        const Messages = [];
        for (const recepient of toList) {
            Messages.push({
                To: [recepient],
            });
        }
        return this.mailjetInstance.post('send', { version: 'v3.1' }).request({
            Globals: globals,
            Messages: Messages,
        });
    }
    async sendHTMLEmailWithAttachments(emails, subject, HTMLbody, attachments = [], inlinedAttachments = [], from = null, textBody = 'This email must be viewed in HTML mode') {
        const toList = this.getEmailList(emails);
        const globals = {
            From: from ? toEmailAddress(from) : this.defaultFrom,
            Subject: subject,
            TextPart: textBody,
            HTMLPart: HTMLbody,
            Attachments: attachments,
            InlinedAttachments: inlinedAttachments,
        };
        const Messages = [];
        for (const recepient of toList) {
            Messages.push({
                To: [recepient],
            });
        }
        return this.mailjetInstance.post('send', { version: 'v3.1' }).request({
            Globals: globals,
            Messages: Messages,
        });
    }
}
exports.EmailCoreService = EmailCoreService;
//# sourceMappingURL=email-core.service.js.map