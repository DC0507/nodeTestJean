"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseConfigService = void 0;
const dotenv = __importStar(require("dotenv"));
dotenv.config();
class BaseConfigService {
    constructor(env) {
        this.env = env;
        this.isProduction = this.getEnvironment() === 'production';
        this.isStage = this.getEnvironment() === 'stage';
    }
    getValue(key, throwOnMissing = true) {
        const value = this.env[key];
        if (!value && throwOnMissing) {
            throw new Error(`config error - missing env variable : ${key}`);
        }
        return value;
    }
    ensureValues(keys) {
        keys.forEach((k) => this.getValue(k, true));
        return this;
    }
    getEnvironment() {
        const env = (this.getValue('NODE_ENV', false) ||
            this.getValue('AZURE_FUNCTIONS_ENVIRONMENT', false))?.toLowerCase();
        if (!env) {
            throw new Error('Environment not set');
        }
        const validEnvironments = ['development', 'production', 'staging'];
        if (!validEnvironments.includes(env)) {
            throw new Error(`Invalid environment "${env}". Must be one of: ${validEnvironments.join(', ')}`);
        }
        return env;
    }
}
exports.BaseConfigService = BaseConfigService;
//# sourceMappingURL=base-config.service.js.map