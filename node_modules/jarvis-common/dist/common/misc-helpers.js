"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalize = capitalize;
exports.unCapitalize = unCapitalize;
exports.generateRandomString = generateRandomString;
exports.previewHTMLContent = previewHTMLContent;
exports.countOccurrences = countOccurrences;
const node_crypto_1 = require("node:crypto");
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function unCapitalize(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
}
function generateRandomString(length = 8, characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') {
    let result = '';
    for (let i = 0; i < length; i++) {
        const randomIndex = (0, node_crypto_1.randomBytes)(1)[0] % characters.length;
        result += characters[randomIndex];
    }
    return result;
}
function previewHTMLContent(input, count = 500, showEndDots = true) {
    const inputString = input ? input : '';
    const decodeHtmlEntities = (str) => {
        const entities = {
            '&nbsp;': ' ',
            '&lt;': '<',
            '&gt;': '>',
            '&amp;': '&',
            '&quot;': '"',
            '&apos;': "'",
        };
        return str.replace(/&[a-z]+;/g, (match) => entities[match] || match);
    };
    let inputStringFormatted = inputString
        .replace(/<[^>]*>?/gm, '')
        .replace(/\s+/g, ' ')
        .replace('.', '. ')
        .trim();
    inputStringFormatted = decodeHtmlEntities(inputStringFormatted);
    if (inputStringFormatted.length > count) {
        inputStringFormatted =
            inputStringFormatted.substring(0, count).trim() +
                (showEndDots ? '...' : '');
    }
    return inputStringFormatted;
}
function countOccurrences(arr) {
    return arr.reduce((occurrenceMap, item) => {
        const count = occurrenceMap.get(item) || 0;
        occurrenceMap.set(item, count + 1);
        return occurrenceMap;
    }, new Map());
}
//# sourceMappingURL=misc-helpers.js.map