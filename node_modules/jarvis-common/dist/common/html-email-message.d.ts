import { EmailAttachment } from '../services/email-core.service';
export declare enum HTMLEmailMessageType {
    Internal = 0,
    External = 1
}
export declare function createHtmlImageTagFromBuffer(svgBuffer: Buffer, type?: string, altText?: string): string;
export declare class HTMLEmailMessage {
    private notifications;
    private summaries;
    title: string;
    private intro;
    private summaryHeader;
    private corporateEmail;
    private emailType;
    private inlinedAttachments;
    private sections;
    private getImage;
    constructor(emailType?: HTMLEmailMessageType, corporateEmail?: string, targetOutput?: 'email' | 'portal');
    setTitle(title: string): void;
    setIntro(intro: string): void;
    setSummaryHeader(intro: string): void;
    addNotification(notification: string): void;
    setNotifications(notifications: string[]): void;
    addSummaryLineItem(summary: string, sectionLink?: string): void;
    createSection(section: string, title: string, sectionLink?: string): void;
    addSectionContent(section: string, content: string): void;
    addInlinedAttachment(attachment: EmailAttachment): void;
    getImageCid(imageName: 'protest' | 'activity' | 'article' | 'clickThrough' | 'foresightLogo'): string;
    getImagePNG(imageName: 'protest' | 'activity' | 'article' | 'clickThrough' | 'foresightLogo'): string;
    getSupportingImageAttachments(): EmailAttachment[];
    private generatePostHTML;
    private getFormattedDate;
    private getFormattedLocation;
    private getMapClickThrough;
    private getFormattedTactic;
    private getRiskColor;
    private getFormatRiskLevel;
    actionMarkup(action: any, long?: boolean, forPortal?: boolean): string;
    articleMarkup(article: any, long?: boolean): string;
    private renderLogo;
    renderCore(): string;
    renderSections(): string;
    private renderSection;
    private renderNotifications;
    private renderEnd;
    private renderSummaries;
    render(): string;
}
//# sourceMappingURL=html-email-message.d.ts.map