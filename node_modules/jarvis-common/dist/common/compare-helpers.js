"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arraysDeepEqual = arraysDeepEqual;
exports.compareObjects = compareObjects;
function arraysDeepEqual(arr1, arr2) {
    if (arr1.length !== arr2.length)
        return false;
    for (let i = 0; i < arr1.length; i++) {
        if (Array.isArray(arr1[i]) && Array.isArray(arr2[i])) {
            if (!arraysDeepEqual(arr1[i], arr2[i]))
                return false;
        }
        else if (typeof arr1[i] === 'object' &&
            arr1[i] !== null &&
            typeof arr2[i] === 'object' &&
            arr2[i] !== null) {
            if (!compareObjects(arr1[i], arr2[i]))
                return false;
        }
        else if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
function compareObjects(obj1, obj2, attributesFilter = [], parentKey = '') {
    const changes = [];
    const keysToCompare = new Set();
    if (parentKey === '' && attributesFilter.length > 0) {
        attributesFilter.forEach((attr) => keysToCompare.add(attr));
    }
    else {
        Object.keys(obj1 || {})
            .concat(Object.keys(obj2 || {}))
            .forEach((key) => keysToCompare.add(key));
    }
    keysToCompare.forEach((key) => {
        const fullKey = parentKey ? `${parentKey}.${key}` : key;
        const value1 = obj1 ? obj1[key] : undefined;
        const value2 = obj2 ? obj2[key] : undefined;
        if (Array.isArray(value1) && Array.isArray(value2)) {
            if (!arraysDeepEqual(value1, value2)) {
                changes.push(`${fullKey}: ${JSON.stringify(value1)} => ${JSON.stringify(value2)}`);
            }
        }
        else if (typeof value1 === 'object' &&
            value1 !== null &&
            typeof value2 === 'object' &&
            value2 !== null) {
            const nestedChanges = compareObjects(value1, value2, [], fullKey);
            if (nestedChanges.length === 0) {
                changes.push(`${fullKey}: ${JSON.stringify(value1)} => ${JSON.stringify(value2)}`);
            }
            else {
                changes.push(...nestedChanges);
            }
        }
        else {
            changes.push(`${fullKey}: ${value1 !== undefined ? JSON.stringify(value1) : 'nothing'} => ${value2 !== undefined ? JSON.stringify(value2) : 'nothing'}`);
        }
    });
    return changes;
}
//# sourceMappingURL=compare-helpers.js.map