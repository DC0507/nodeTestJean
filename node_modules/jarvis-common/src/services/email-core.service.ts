import Mailjet from 'node-mailjet';
import { HTMLEmailMessage } from '../common';

export interface EmailClientConfig {
  apiSecret: string;
  apiKey: string;
  defaultFrom: string;
  defaultTo: string;
  releaseEmails: boolean;
}

/**
 * Interface for email address with name and email
 *
 * @param Email - The email address
 * @param Name - The name of the recipient
 */
export interface EmailAddress {
  Email: string;
  Name: string;
}

/**
 * Interface for email address with name and email.
 *
 * @param ContentType - The MIME type of the attachment
 * @param Filename - The name of the attachment
 * @param Base64Content - The base64 encoded content of the attachment
 *
 * example:
 * {
 *   ContentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
 *   Filename: excel.fileName,
 *   Base64Content: excel.file.toString("base64"),
 * }
 */
export interface EmailAttachment {
  ContentType: string;
  Filename: string;
  Base64Content: string;
  ContentID?: string;
}

/**
 * Type for email recipients. Can be a single email address, an array of email addresses, or a string, or an array of strings.
 */
export type EmailRecipients = string | string[] | EmailAddress | EmailAddress[];

/**
 * Type for a single email recipient. Can be a string or an EmailAddress object.
 */
export type EmailRecipient = string | EmailAddress;

function castAsEmailAddress(email: string, name = ''): EmailAddress {
  return {
    Email: email,
    Name: name,
  };
}

function toEmailAddress(email: string | EmailAddress): EmailAddress {
  return typeof email === 'string' ? castAsEmailAddress(email) : email;
}

/**
 * Converts an array of email addresses to an array of EmailAddress objects.
 *
 * @param emails - The array of email addresses to convert. Can be a single email address, an array of email addresses, or a string, or an array of strings.
 * @returns An array of EmailAddress objects.
 */
export function toEmailList(
  emails: string | string[] | EmailAddress | EmailAddress[],
): EmailAddress[] {
  if (Array.isArray(emails)) {
    return emails.map((email) =>
      typeof email === 'string' ? castAsEmailAddress(email) : email,
    );
  } else {
    return [typeof emails === 'string' ? castAsEmailAddress(emails) : emails];
  }
}

/**
 * Service for sending emails using Mailjet
 * Supports both HTML emails and HTML emails with attachments
 */
export class EmailCoreService {
  private releaseEmails: boolean;
  public readonly defaultTo: EmailAddress;
  private mailjetInstance: any;
  public readonly defaultFrom: EmailAddress;

  /**
   * Initializes the email service with configuration from environment variables
   * Required env vars: PORTAL_FROM_EMAIL, PORTAL_TO_EMAIL, MAILJET_API_KEY, MAILJET_API_SECRET
   * Optional env vars: RELEASE_EMAILS (true/false) - controls whether emails are sent to actual recipients
   * @throws Error if required environment variables are missing
   */
  constructor(config: EmailClientConfig) {
    if (!config.defaultFrom)
      throw Error('missing config variable "defaultFrom"');
    if (!config.defaultTo) throw Error('missing config variable "defaultTo"');
    if (!config.apiKey) throw new Error('missing config variable "apiKey"');
    if (!config.apiSecret)
      throw new Error('missing config variable "apiSecret"');

    this.mailjetInstance = new Mailjet({
      apiKey: config.apiKey,
      apiSecret: config.apiSecret,
    });

    this.defaultFrom = {
      Email: config.defaultFrom,
      Name: 'Foresight Portal',
    };

    this.defaultTo = {
      Email: config.defaultTo,
      Name: config.defaultTo,
    };

    this.releaseEmails = !!config.releaseEmails ? config.releaseEmails : false;

    if (this.releaseEmails) {
      console.log(`** WARNING ** Will release emails to clients`);
    } else {
      console.log(
        `environment variable RELEASE_EMAILS: ${this.releaseEmails}, will NOT release emails, sending to ${config.defaultTo}`,
      );
    }
  }

  /**
   * Gets the list of email recipients based on releaseEmails setting. If
   * releaseEmails is false or missing, it will email the defaultTo email address.
   * @param emails - Single or multiple email addresses in string or EmailAddress format
   * @returns Array of EmailAddress objects
   */
  getEmailList(emails: EmailRecipients): EmailAddress[] {
    if (this.releaseEmails) {
      return toEmailList(emails);
    } else {
      return [this.defaultTo];
    }
  }

  async sendHTMLEmailMessage(
    emails: EmailRecipients,
    message: HTMLEmailMessage,
    attachments: EmailAttachment[] = [],
    from: EmailRecipient | null = null,
  ): Promise<any> {
    return await this.sendHTMLEmailWithAttachments(
      emails,
      message.title,
      message.render(),
      attachments,
      message.getSupportingImageAttachments(),
      from,
    );
  }

  /**
   * Sends an HTML email to specified recipients
   * @param emails - EmailRecipients
   * @param subject - Email subject
   * @param HTMLbody - Email body in HTML format
   * @param from - Optional sender EmailRecipient (defaults to PORTAL_FROM_EMAIL)
   * @param textBody - Optional plain text version of the email
   * @returns Promise with the Mailjet API response
   */
  async sendHTMLEmail(
    emails: EmailRecipients,
    subject: string,
    HTMLbody: string,
    from: EmailRecipient | null = null,
    textBody = 'This email must be viewed in HTML mode',
  ): Promise<any> {
    const toList = this.getEmailList(emails);
    const globals = {
      From: from ? toEmailAddress(from) : this.defaultFrom,
      Subject: subject,
      TextPart: textBody,
      HTMLPart: HTMLbody,
    };
    const Messages = [];
    for (const recepient of toList) {
      Messages.push({
        To: [recepient],
      });
    }
    return this.mailjetInstance.post('send', { version: 'v3.1' }).request({
      Globals: globals,
      Messages: Messages,
    });
  }

  /**
   * Sends an HTML email with attachments to specified recipients
   * @param emails - Single or multiple email addresses
   * @param subject - Email subject
   * @param HTMLbody - Email body in HTML format
   * @param attachments - Array of EmailAttachment
   * @param inlinedAttachments - Array of EmailAttachment
   * @param from - Optional sender email address (defaults to PORTAL_FROM_EMAIL)
   * @param textBody - Optional plain text version of the email
   * @returns Promise with the Mailjet API response
   */
  async sendHTMLEmailWithAttachments(
    emails: EmailRecipients,
    subject: string,
    HTMLbody: string,
    attachments: EmailAttachment[] = [],
    inlinedAttachments: EmailAttachment[] = [],
    from: EmailRecipient | null = null,
    textBody = 'This email must be viewed in HTML mode',
  ): Promise<any> {
    const toList = this.getEmailList(emails);
    const globals = {
      From: from ? toEmailAddress(from) : this.defaultFrom,
      Subject: subject,
      TextPart: textBody,
      HTMLPart: HTMLbody,
      Attachments: attachments,
      InlinedAttachments: inlinedAttachments,
    };
    const Messages = [];
    for (const recepient of toList) {
      Messages.push({
        To: [recepient],
      });
    }
    return this.mailjetInstance.post('send', { version: 'v3.1' }).request({
      Globals: globals,
      Messages: Messages,
    });
  }
}
