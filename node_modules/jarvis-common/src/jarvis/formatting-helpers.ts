import moment from 'moment';

/**
 * Constructs a title for an action based on its properties.
 * @param action - The action object.
 * @returns A formatted string representing the action title.
 */
export function getActionTitle(action: any): string {
  if (action?.title?.startsWith('-')) {
    return `${
      action?.date ? `${moment.utc(action.date).format('D MMMM')} - ` : ''
    }${(action?.location?.city ? action?.location?.city : '').concat(
      action.location?.province
        ? ', ' + action?.location?.province
        : `${
            action?.location?.country ? ', ' + action?.location?.country : ''
          }`,
    )} : ${
      action?.status ? `(${formatActionStatus(action?.actionStatus)}) ` : ''
    }${
      action?.issues && action?.issues?.length > 0
        ? action?.issues?.map((x: any) => x?.name).join(', ')
        : ''
    } ${action?.tactic?.name ? action?.tactic?.name : ''}`;
  } else {
    return `${
      action?.date ? `${moment.utc(action?.date).format('D MMMM')} - ` : ''
    }${action?.title}`;
  }
}

enum ActionStatus {
  Updated = 'Updated',
  Rescheduled = 'Rescheduled',
  LocationChanged = 'LocationChanged',
  ImpactIncreased = 'ImpactIncreased',
  Canceled = 'Canceled',
  Reviewed = 'Reviewed',
}

/**
 * Formats the status of an action into a readable string as a stand alone value.
 * @param status - The action status.
 * @returns A formatted string representing the action status.
 */
export function formatActionStatus(status: ActionStatus | any): string {
  if (!status) return 'Created';
  switch (status) {
    case ActionStatus.Canceled:
      return 'Canceled';
    case ActionStatus.Updated:
      return 'Updated';
    case ActionStatus.ImpactIncreased:
      return 'Risk Increased';
    case ActionStatus.LocationChanged:
      return 'Location Changed';
    case ActionStatus.Rescheduled:
      return 'Rescheduled';
    case ActionStatus.Reviewed:
      return 'Reviewed';
    default:
      return '';
  }
}
