import { ApolloClient, NormalizedCacheObject, gql } from '@apollo/client';

type BatchType = 'Set' | 'Remove';

// TODO: make this injectable for the ApolloClient, etc.
export class BatchRelationMutation {
  entity: string;
  id: string;
  returnAttribute: string;
  inputs: string[] = [];
  mutations: string[] = [];
  variables: {}[] = [];

  constructor(entity: string, id: string, returnAttribute: string = 'id') {
    this.entity = entity;
    this.id = id;
    this.returnAttribute = returnAttribute;
  }

  private getInputSignature(): string {
    let results = '';
    for (let i = 0; i < this.variables.length; i++) {
      results = results + `\t$input${i}: ${this.inputs[i]}!\n`;
    }
    return results;
  }

  private getCallSignature(): string {
    let results = '';
    for (let i = 0; i < this.variables.length; i++) {
      results =
        results +
        `\tm${i}: ${this.mutations[i]} (input: $input${i}) {  ${this.returnAttribute}  }\n`;
    }
    return results;
  }

  private getVariablesObject(): any {
    const results: Record<string, any> = {};
    for (let i = 0; i < this.variables.length; i++) {
      results[`input${i}`] = this.variables[i];
    }
    return results;
  }

  private getMutationSignature() {
    return `
  mutation executeBatch (
  ${this.getInputSignature()}) 
  {
  ${this.getCallSignature()}
  }
  `;
  }

  private getMutationObject() {
    const x = {
      mutation: gql(this.getMutationSignature()),
      variables: this.getVariablesObject(),
    };
    return x;
  }

  set(relation: string, value: string | string[]): BatchRelationMutation {
    if (value) {
      this.inputs.push(`Set${relation}On${this.entity}Input`);
      this.mutations.push(`set${relation}On${this.entity}`);
      if (Array.isArray(value))
        this.variables.push({ id: this.id, relationIds: value });
      else this.variables.push({ id: this.id, relationId: value });
    }
    return this;
  }

  remove(
    relation: string,
    value: string | string[],
    action: BatchType = 'Set',
  ): BatchRelationMutation {
    if (value) {
      this.inputs.push(`Remove${relation}From${this.entity}Input`);
      this.mutations.push(`remove${relation}From${this.entity}`);
      if (Array.isArray(value))
        this.variables.push({ id: this.id, relationIds: value });
      else this.variables.push({ id: this.id, relationId: value });
    }
    return this;
  }

  async execute(client: ApolloClient<NormalizedCacheObject>) {
    return await client.mutate(this.getMutationObject()).catch((err) => {
      console.log(JSON.stringify(err));
      throw err;
    });
  }

  printGraphQL(): BatchRelationMutation {
    console.log('-- mutation --');
    console.log(this.getMutationSignature());
    console.log('-- variables --');
    console.log(this.getVariablesObject());
    return this;
  }
}
