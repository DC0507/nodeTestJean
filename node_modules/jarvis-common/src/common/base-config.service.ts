import * as dotenv from 'dotenv';
dotenv.config();

export class BaseConfigService {
  constructor(protected env: { [k: string]: string | undefined }) {
  }

  isProduction = this.getEnvironment() === 'production';
  isStage = this.getEnvironment() === 'stage';

  getValue(key: string, throwOnMissing = true): string {
    const value = this.env[key];
    if (!value && throwOnMissing) {
      throw new Error(`config error - missing env variable : ${key}`);
    }
    return value;
  }

  ensureValues(keys: string[]) {
    keys.forEach((k) => this.getValue(k, true));
    return this;
  }

  getEnvironment() {
    const env =
      (this.getValue('NODE_ENV', false) ||
      this.getValue('AZURE_FUNCTIONS_ENVIRONMENT', false))?.toLowerCase();

    if (!env) {
      throw new Error('Environment not set');
    }

    const validEnvironments = ['development', 'production', 'staging'];
    if (!validEnvironments.includes(env)) {
      throw new Error(
        `Invalid environment "${env}". Must be one of: ${validEnvironments.join(
          ', ',
        )}`,
      );
    }

    return env;
  }
}
