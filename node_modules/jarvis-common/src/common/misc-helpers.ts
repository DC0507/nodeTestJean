import { randomBytes } from 'node:crypto';

/**
 * Capitalize the first letter of a string
 * @param string - The string to capitalize
 * @returns The capitalized string
 */
export function capitalize(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * UnCapitalize the first letter of a string
 * @param string - The string to uncapitalize
 * @returns The uncapitalized string
 */
export function unCapitalize(string: string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}

/**
 * Generate a random string of a given length
 * @param length - The length of the random string
 * @param characters - The characters to use in the random string
 * @returns The random string
 */
export function generateRandomString(
  length = 8,
  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
) {
  let result = '';

  for (let i = 0; i < length; i++) {
    const randomIndex = randomBytes(1)[0] % characters.length;
    result += characters[randomIndex];
  }

  return result;
}

/**
 * Previews HTML content by removing tags and truncating the text.
 * @param input - The HTML input string.
 * @param count - The maximum number of characters to display.
 * @param showEndDots - Whether to show ellipsis at the end.
 * @returns A plain text preview of the HTML content.
 */
export function previewHTMLContent(
  input: string,
  count = 500,
  showEndDots = true,
): string {
  const inputString = input ? input : '';

  // Function to replace HTML entities
  const decodeHtmlEntities = (str: string) => {
    const entities: Record<string, string> = {
      '&nbsp;': ' ',
      '&lt;': '<',
      '&gt;': '>',
      '&amp;': '&',
      '&quot;': '"',
      '&apos;': "'",
      // Add more entities as needed
    };
    return str.replace(/&[a-z]+;/g, (match) => entities[match] || match);
  };

  // Remove HTML tags and decode HTML entities
  let inputStringFormatted = inputString
    .replace(/<[^>]*>?/gm, '') // Remove HTML tags
    .replace(/\s+/g, ' ') // Replace multiple spaces with a single space
    .replace('.', '. ')
    .trim(); // Trim leading and trailing spaces

  inputStringFormatted = decodeHtmlEntities(inputStringFormatted);

  // Truncate the string if it's longer than the specified count
  if (inputStringFormatted.length > count) {
    inputStringFormatted =
      inputStringFormatted.substring(0, count).trim() +
      (showEndDots ? '...' : '');
  }

  return inputStringFormatted;
}

/**
 * Counts the occurrences of each string in an array.
 * @param arr - An array of strings.
 * @returns A map with strings as keys and their occurrence counts as values.
 */
export function countOccurrences(arr: string[]): Map<string, number> {
  return arr.reduce((occurrenceMap, item) => {
    const count = occurrenceMap.get(item) || 0;
    occurrenceMap.set(item, count + 1);
    return occurrenceMap;
  }, new Map<string, number>());
}
