export type CacheArrayKey = string[];
export type CacheValue = any;

/**
 * A simple cache map that uses a sorted key based on an array of strings to store and retrieve values. Used when caching content based on audiences.
 */
export class CacheMapByArrayKey {
  private cache: Map<string, CacheValue> = new Map();

  /**
   * Generates a unique key for the cache based on the provided key array.
   * @param keyArray - An array of strings to generate the cache key.
   * @returns A string representing the generated cache key.
   */
  private generateKey(keyArray: CacheArrayKey): string {
    // Sort the keyArray to ensure order doesn't matter
    const sortedKey = keyArray.slice().sort();
    return sortedKey.join(',');
  }

  /**
   * Sets a value in the cache with the specified key.
   * @param keyArray - An array of strings to generate the cache key.
   * @param value - The value to be stored in the cache.
   */
  public set(keyArray: CacheArrayKey, value: CacheValue): void {
    const cacheKey = this.generateKey(keyArray);
    this.cache.set(cacheKey, value);
  }

  /**
   * Retrieves a value from the cache using the specified key.
   * @param keyArray - An array of strings to generate the cache key.
   * @returns The cached value or undefined if not found.
   */
  public get(keyArray: CacheArrayKey): CacheValue | undefined {
    const cacheKey = this.generateKey(keyArray);
    return this.cache.get(cacheKey);
  }
}
