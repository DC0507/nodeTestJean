import { EmailAttachment } from '../services/email-core.service';
import {
  protestIconPNG,
  activityIconPNG,
  articleIconPNG,
  clickThroughIconPNG,
  foresightLogoPNG,
} from '../assets/images';
import moment from 'moment';
import { previewHTMLContent } from './misc-helpers';
import { configService } from '../config/config.service';


interface SectionContent {
  title: string;
  sectionLink: string;
  content: string[];
}

interface SummaryLineItem {
  summary: string;
  sectionLink: string;
}

/**
 * The type of HTMLEmailMessage.
 * Internal: the email does not include the confidential disclaimer
 * External: the email includes the confidential disclaimer
 */
export enum HTMLEmailMessageType {
  Internal,
  External,
}

/**
 * Creates an HTML image tag from a buffer.
 * @param svgBuffer - The buffer containing the SVG data.
 * @param type - The image type (default is "svg+xml").
 * @param altText - The alt text for the image.
 * @returns A string representing the HTML image tag.
 */
export function createHtmlImageTagFromBuffer(
  svgBuffer: Buffer,
  type = 'svg+xml',
  altText = '',
) {
  // Convert the SVG buffer to a base64-encoded string
  const base64Svg = svgBuffer.toString('base64');

  // Create the HTML image tag
  const htmlImageTag = `<img style="width: 100%; max-width: 600px; height: auto;" alt="${altText}" src="data:image/${type};base64,${base64Svg}" alt="SVG Image"/>`;

  return htmlImageTag;
}

/**
 * The HTMLEmailMessage class is used to create an HTML email message in a common look and feel.
 */
export class HTMLEmailMessage {
  private notifications: string[] = [];
  private summaries: SummaryLineItem[] = [];
  public title = '';
  private intro = '';
  private summaryHeader = '';
  private corporateEmail = '';
  private emailType: HTMLEmailMessageType;
  private inlinedAttachments: EmailAttachment[] = [];
  private sections: Map<string, SectionContent> = new Map();
  private getImage: (name: any) => string;

  constructor(
    emailType: HTMLEmailMessageType = HTMLEmailMessageType.External,
    corporateEmail: string = configService.getValue('PORTAL_FROM_EMAIL') ||
      'unknown@unknown.com',
    targetOutput: 'email' | 'portal' = 'email',
  ) {
    this.corporateEmail = corporateEmail;
    this.emailType = emailType;
    this.getImage = targetOutput === 'email' ? this.getImageCid : this.getImagePNG;
  }

  setTitle(title: string) {
    this.title = title;
  }

  setIntro(intro: string) {
    this.intro = intro;
  }

  setSummaryHeader(intro: string) {
    this.summaryHeader = intro;
  }

  // Method to add a notification
  addNotification(notification: string) {
    this.notifications.push(notification);
  }

  setNotifications(notifications: string[]) {
    this.notifications = notifications;
  }

  // Method to add a summary
  addSummaryLineItem(summary: string, sectionLink = '') {
    this.summaries.push({ summary, sectionLink });
  }

  createSection(section: string, title: string, sectionLink = '') {
    this.sections.set(section, { title, sectionLink, content: [] });
  }

  addSectionContent(section: string, content: string) {
    this.sections.get(section)?.content.push(content);
  }

  addInlinedAttachment(attachment: EmailAttachment) {
    this.inlinedAttachments.push(attachment);
  }

  getImageCid(
    imageName:
      | 'protest'
      | 'activity'
      | 'article'
      | 'clickThrough'
      | 'foresightLogo',
  ): string {
    const imageMap: { [key: string]: string } = {
      protest: protestIconPNG,
      activity: activityIconPNG,
      article: articleIconPNG,
      clickThrough: clickThroughIconPNG,
      foresightLogo: foresightLogoPNG,
    };

    if (!this.inlinedAttachments.find((x) => x.ContentID === imageName)) {
      const imageContent = imageMap[imageName];
      if (!imageContent) {
        throw new Error(`Image content for ${imageName} not found`);
      }
      if (imageContent) {
        this.inlinedAttachments.push({
          ContentID: imageName,
          Filename: `${imageName}.png`,
          ContentType: 'image/png',
          Base64Content: imageContent,
        });
      }
    }

    return `cid:${imageName}`;
  }

  getImagePNG(
    imageName:
      | 'protest'
      | 'activity'
      | 'article'
      | 'clickThrough'
      | 'foresightLogo',
  ): string {
    const imageMap: { [key: string]: string } = {
      protest: protestIconPNG,
      activity: activityIconPNG,
      article: articleIconPNG,
      clickThrough: clickThroughIconPNG,
      foresightLogo: foresightLogoPNG,
    };

    if (!this.inlinedAttachments.find((x) => x.ContentID === imageName)) {
      const imageContent = imageMap[imageName];
      return `data:image/png;base64,${imageContent}`;
    }

    return `data:image/png;base64,???`;
  }

  getSupportingImageAttachments(): EmailAttachment[] {
    return this.inlinedAttachments;
  }

  /**
   * Helper method to generate HTML for action or article.
   */
  private generatePostHTML(
    id: string,
    title: string,
    subtitle: string,
    subtitle2: string,
    content: string,
    dimensions: { name: string; entries: string[] }[],
    type: 'activity' | 'protest' | 'article',
    risk = '',
    forPortal = false,
  ): string {
    const baseUrl = ['activity', 'protest'].includes(type)
      ? 'actions'
      : 'articles';
    const dimensionsHTML = dimensions
      .filter((x) => x.entries.length > 0)
      .map(
        (dimension) =>
          `<strong>${dimension.name}:</strong> ${dimension.entries.join(
            ', ',
          )}<br>`,
      )
      .join(' ');

    const icon = `<img src="${this.getImage(type)}" alt="${type} Icon" />`;

    const html = `
  <div>
    <div style="display: flex; align-items: center;">
      <div style="
    display: flex; 
    flex-direction: column; 
    align-items: center; 
    justify-content: center; 
    text-align: center;
    flex-shrink: 0; 
    margin-right: 1rem;
">
    ${icon}
    ${risk}
</div>

      <div style="width: 100%;">
        <a href="https://portal.foresightreports.com/portal/${baseUrl}/detail/${id}?referrer=DU" class="title" style="text-decoration: none; font-weight: bold;" title="Open in the FORESIGHT Portal">${title}</a>
        <hr/>
        <div style="margin: 0.2rem 0 0 0; line-height: 1.4;">
        ${subtitle ? `<i>${subtitle}</i></br>` : ''}
        ${subtitle2 ? `<i>${subtitle2}</i></br>` : ''}
        </div>
      </div>
    </div>
    <div style="margin: 0.5rem 0 0.5rem 0; line-height: 1.3;" >${content}</div>
    <p style="margin: 0.2rem 0.625rem 0; line-height: 1.4;">
      ${dimensionsHTML}
    </p>
   
  </div>
`;

    return html;
  }

  private getFormattedDate(date: string, dateOnly = false, utc = true): string {
    if (!date) return '';
    const momentDate = utc ? moment.utc(date) : moment(date);
    const minutes = momentDate.hours() * 60 + momentDate.minutes();

    // Only show time if it's not within 5 minutes of midnight (00:00)
    const showTime = minutes > 5 && minutes < 1435; // 1440 - 5

    return `${momentDate.format(
      showTime && !dateOnly ? 'D MMMM YYYY hh:mm a' : 'D MMMM YYYY',
    )}`;
  }

  private getFormattedLocation(action: any): string {
    const location = action.location;

    const city = location?.city ? ' ' + location.city : '';
    const province = location?.province ? ', ' + location.province : '';
    const locationDescription = action?.locationDescription
      ? ', ' + action?.locationDescription
      : '';
    return city + province + locationDescription;
  }

  private getMapClickThrough(action: any): string {
    if (action?.tactic?.protest && action?.latitude && action?.longitude) {
      return `<a href="https://www.google.com/maps?q=${action.latitude},${
        action.longitude
      }" target="_blank" style="vertical-align: middle;" title="Open in Google Maps">
          <img src="${this.getImage(
            'clickThrough',
          )}" alt="Click Through Icon" />
      </a>`;
    }
    return '';
  }

  private getFormattedTactic(tactic: any): string {
    return `(${tactic?.name ?? ''})`;
  }

  private getRiskColor(impact: string): string {
    if (impact.startsWith('1')) {
      return '#369d66';
    }
    if (impact.startsWith('2')) {
      return '#f4b868';
    }
    if (impact.startsWith('3')) {
      return '#ed7c4b';
    }
    if (impact.startsWith('4')) {
      return '#a43d4a';
    }
    return '#a6a6a6';
  }

  private getFormatRiskLevel(impact: string): string {
    if (!impact) return '';
    // Use regex to remove the number and brackets
    const cleaned = impact.replace(/^\d+\s*\(|\)$/g, '').trim();

    // Capitalize the first letter and lowercase the rest
    const risk =
      cleaned.charAt(0).toUpperCase() + cleaned.slice(1).toLowerCase();
    return `<span style="font-size: 0.8rem; color: ${this.getRiskColor(
      impact,
    )};">${risk}</span>`;
  }

  public actionMarkup(action: any, long = false, forPortal = false): string {
    if (!action) return '';

    let title = '';
    let subtitle = `${this.getFormattedLocation(
      action,
    )} ${this.getFormattedTactic(action.tactic)}`;
    const subtitle2 = `<strong>Date:</strong> ${this.getFormattedDate(
      action.date,
    )} ${
      action.ongoing
        ? ' <strong>Ongoing</strong>'
        : action.endDate
        ? ` <strong>Until:</strong> ${this.getFormattedDate(action.endDate)}`
        : ''
    }`;

    if (action.title?.startsWith('-')) {
      title = subtitle + this.getMapClickThrough(action);
      subtitle = '';
    } else {
      title = action.title ?? '';
      subtitle = subtitle + this.getMapClickThrough(action);
    }

    if (long) {
      const dimensions = [
        {
          name: 'Participation',
          entries:
            action?.going > 0 || action?.interested > 0
              ? [
                  `${
                    action.interested > 0
                      ? `Interested: ${action.interested}`
                      : ''
                  }${
                    action.going > 0
                      ? `${action.interested > 0 ? ', ' : ''} Going: ${
                          action.going
                        }`
                      : ''
                  } as of ${this.getFormattedDate(
                    action.lastModifiedDate,
                    true,
                    false,
                  )}`,
                ]
              : [],
        },
        {
          name: 'Sectors',
          entries: action?.sectors?.map((s: any) => s.name) ?? [],
        },
        {
          name: 'Issues',
          entries: action?.issues?.map((i: any) => i.name) ?? [],
        },
        {
          name: 'Groups',
          entries: action?.groups?.map((i: any) => i.name) ?? [],
        },
        {
          name: 'Campaigns',
          entries: action?.campaigns?.map((i: any) => i.name) ?? [],
        },
        {
          name: 'Sources',
          entries:
            action?.sources?.map(
              (x: any) =>
                `<a href="${x}" style="text-decoration: none;" title="WARNING: Potentially unsafe link" target="_blank">${x}</a>`,
            ) ?? [],
        },
        {
          name: 'Hashtags',
          entries: action?.hashtags ?? [],
        },
      ];

      return this.generatePostHTML(
        action.id,
        title,
        subtitle,
        subtitle2,
        action.content,
        dimensions,
        action.tactic.protest ? 'protest' : 'activity',
        this.getFormatRiskLevel(action.impact),
        forPortal,
      );
    } else {
      const dimensions = [
        {
          name: 'Sectors',
          entries: action?.sectors?.map((s: any) => s.name) ?? [],
        },
        {
          name: 'Issues',
          entries: action?.issues?.map((i: any) => i.name) ?? [],
        },
      ];

      return this.generatePostHTML(
        action.id,
        title,
        subtitle,
        subtitle2,
        previewHTMLContent(action.content ?? '').substring(0, 500),
        dimensions,
        action.tactic.protest ? 'protest' : 'activity',
        this.getFormatRiskLevel(action.impact),
        forPortal,
      );
    }
  }

  public articleMarkup(article: any, long = false): string {
    if (!article) {
      return '';
    }

    if (long) {
      const dimensions = [
        {
          name: 'Sectors',
          entries: article?.sectors?.map((s: any) => s.name) ?? [],
        },
        {
          name: 'Issues',
          entries: article?.issues?.map((i: any) => i.name) ?? [],
        },
        {
          name: 'Groups',
          entries: article?.groups?.map((i: any) => i.name) ?? [],
        },
        {
          name: 'Campaigns',
          entries: article?.campaigns?.map((i: any) => i.name) ?? [],
        },
        {
          name: 'Sources',
          entries:
            article?.sources?.map(
              (x: any) =>
                `<a href="${x}" style="text-decoration: none;" title="WARNING: Potentially unsafe link" target="_blank">${x}</a>`,
            ) ?? [],
        },
        {
          name: 'Hashtags',
          entries: article?.hashtags ?? [],
        },
      ];

      return this.generatePostHTML(
        article.id,
        article.title,
        '',
        '',
        article.content,
        dimensions,
        'article',
      );
    } else {
      const dimensions = [
        {
          name: 'Sectors',
          entries: article?.sectors?.map((s: any) => s.name) ?? [],
        },
        {
          name: 'Issues',
          entries: article?.issues?.map((i: any) => i.name) ?? [],
        },
      ];

      return this.generatePostHTML(
        article.id,
        article.title,
        '',
        '',
        previewHTMLContent(article.content ?? '').substring(0, 500) + '...',
        dimensions,
        'article',
      );
    }
  }

  private renderLogo(): string {
    return `<img margin: 0.2rem 0 0 0.625rem src="${this.getImage(
      'foresightLogo',
    )}">`;
  }

  public renderCore(): string {
    return `
    <table class="container" role="presentation">
        ${this.renderSummaries()}
        ${this.renderSections()}
    </table>
    `;
  }

  public renderSections(): string {
    let sections = '';
    this.sections.forEach((section) => {
      sections += this.renderSection(section);
    });
    return sections;
  }

  private renderSection(sectionData: SectionContent): string {
    if (!sectionData) return '';
    return `
       <tr ${sectionData.sectionLink ? `id="${sectionData.sectionLink}"` : ''}>
          <td class="section">
            <h3 style="margin: 0 0 0.625rem" class="section-title">
            ${sectionData.title}</h3>
            ${sectionData.content
              .map(
                (content) => `<div style="margin-top: 1rem;">${content}</div>`,
              )
              .join('')}
          </td>
        </tr>
    `;
  }

  private renderNotifications(): string {
    let notificationsSection = '';
    if (this.notifications.length > 0) {
      notificationsSection += `
        <tr>
          <td class="notifications">
        `;
      this.notifications.forEach((notification) => {
        notificationsSection += `
            <p>${notification}</p>
        `;
      });
      notificationsSection += `
          </td>
        </tr>
        `;
    }
    return notificationsSection;
  }

  private renderEnd(): string {
    if (this.emailType === HTMLEmailMessageType.Internal) return '';
    return `
    <div style="font-size: 0.8em; font-style: italic; margin: 1rem 0 0; background-color: #e3dbda; padding: 1rem;">
    <p>
    This is an automated email from the FORESIGHT portal sent as part of your organization's subscription. The information is <b>CONFIDENTIAL</b> and intended solely for use by the individual or entity to whom it is addressed; it should not be distributed or shared. 
    
    If you have received this in error, have any questions, or require assistance, please contact us at <a href="mailto:${this.corporateEmail}">${this.corporateEmail}</a>. 
    
    You can manage your email preferences on the portal under <a src="https://portal.foresightreports.com/portal/personalization">personalization</a>. If you'd prefer not to receive any distribution emails from us, you can <a href="[[UNSUB_LINK_EN]]">unsubscribe</a>.
    </p>
    </div>
    `;
  }

  private renderSummaries(): string {
    let summarySection = '';
    if (this.summaries.length > 0 || this.intro) {
      summarySection = `
     <tr>
          <td class="section"> 
            ${
              this.intro
                ? `<p style="margin: 0.65rem 0 0.65rem 0;">${this.intro}</p>`
                : ''
            }
            ${
              this.summaries.length > 0
                ? `
                ${
                  this.summaryHeader
                    ? `<h3 style="margin: 0 0 0.625rem; font-size: 1.125em; color: #333;">${this.summaryHeader}</h3>`
                    : ''
                }  
                <ul style="margin: 0; padding: 1rem 1.25rem; list-style-type: disc; color: #555;">

                    ${this.summaries
                      .map(
                        (summary) =>
                          `<li>${
                            summary.sectionLink
                              ? `<a href="#${summary.sectionLink}">${summary.summary}</a>`
                              : summary.summary
                          }</li>`,
                      )
                      .join('')}
                </ul>`
                : ''
            }
          </td>
    </tr>
    `;
    }
    return summarySection;
  }

  render(): string {
    return `
    <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title> ${this.title}</title>
  <style>
   /* Base styles for email */
  body {
    font-family: Arial, sans-serif;
    font-size: 1em;
    margin: 0;
    padding: 0;
    background-color: #f9f9f9;
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    text-size-adjust: 100%;
  }
  table {
    border-spacing: 0;
    border-collapse: collapse;
    width: 100%;
  }
  p {
    margin: 0.3rem 0 0.3rem 0;
  }
  td {
    padding: 0;
  }
  .container {
    max-width: 60rem; 
    width: 100%;
    margin: 0 auto;
    background-color: #ffffff;
    border-radius: 0.625rem;
    box-shadow: 0 0.125rem 0.3125rem rgba(0, 0, 0, 0.1);
    padding: 1.25rem; 
  }
  .header {
    background-color: #800020;
    color: #ffffff;
    text-align: center;
    padding: 1.25rem; 
    font-size: 1.25em; 
    font-weight: bold;
  }  
  .notifications {
    font-size: 1em;
    background-color: #c7c9c8;
    padding: 0.25rem 1.25rem 0.25rem 1.25rem;
  }
  .title {
    font-size: 1.2em;
    font-weight: bold;
  }
  .section-title {
    background-color: #c7c9c8;
    padding: 0.625rem; 
    font-size: 1.2em;
    font-weight: bold;
  }
  .section {
    font-size: 1em;
    color: #333333;
    padding: 1.25rem; 
  }
  .footer {
    background-color: #800020;
    color: #ffffff;
    text-align: center;
    padding: 1rem; 
    font-size: 0.875em;
  }
  a {
    color: #800020;
    text-decoration: none;
  }
  a:hover {
    text-decoration: underline;
  }

  /* Remove padding for small devices */
  @media (max-width: 30prem) { 
     .container {
        padding: 1rem; 
        border-radius: 0; 
      }
      .header, .section, .footer {
        padding: 0.75rem; 
      }
      .header {
        font-size: 1em; 
      }
      .section {
        font-size: 0.9em; 
      }
      .footer {
        font-size: 0.9em; 
      }
  }
  </style>
</head>
<body style="margin: 0; padding: 0; background-color: #f9f9f9;">
<table width="100%" cellpadding="0" cellspacing="0" role="presentation">
  <tr>
    <td align="center" style="padding: 1.25rem;"> 
      ${this.renderLogo()}
      <!-- Outer container -->
      <table class="container" role="presentation">

        <!-- Header -->
        <tr>
          <td class="header">
            ${this.title}
          </td>
        </tr>

        <!-- Notifications -->
        ${this.renderNotifications()}

        <!-- Summary Section -->
        ${this.renderSummaries()}

        <!-- Sections -->
        ${this.renderSections()}

        <!-- Footer -->
        <tr>
          <td style="background-color: #800020; color: #ffffff; text-align: center; padding: 1.25rem; font-size: 0.875em;">
            <p style="margin: 0;">FORESIGHT Reports | <a href="mailto:${
              this.corporateEmail
            }" 
            style="color: #ffffff; text-decoration: none;">${
              this.corporateEmail
            }</a></p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table align="center">
${this.renderEnd()}
</body>
</html>
    `;
  }
}
